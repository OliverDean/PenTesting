#!/bin/bash

# Define the Redis configuration file path and script path
REDIS_CONF="/etc/redis/redis.conf"
SCRIPT_PATH=$(realpath "$0")

# Check if Redis server is installed
if ! dpkg -s redis-server >/dev/null 2>&1; then
    echo "Installing Redis server..."
    sudo apt-get update
    sudo apt-get install -y redis-server
else
    echo "Redis server is already installed."
fi

# Backup the original configuration file (if not already backed up)
if [ ! -f "${REDIS_CONF}.bak" ]; then
    echo "Backing up the original redis.conf to redis.conf.bak"
    sudo cp "$REDIS_CONF" "${REDIS_CONF}.bak"
fi

# Get the current Redis port
OLD_PORT=$(grep '^port ' "$REDIS_CONF" | awk '{print $2}')

# Generate a new random port between 1024 and 6500
NEW_PORT=$((1024 + RANDOM % 5476)) # 6500 - 1024 = 5476
echo "Setting Redis to use random port: $NEW_PORT"

# Replace the old port with the new random port in redis.conf
if grep -q '^port ' "$REDIS_CONF"; then
    sudo sed -i "s/^port $OLD_PORT/port $NEW_PORT/" "$REDIS_CONF"
    echo "Replaced port $OLD_PORT with $NEW_PORT in redis.conf"
else
    echo "No existing port found, adding port $NEW_PORT to redis.conf"
    echo "port $NEW_PORT" | sudo tee -a "$REDIS_CONF" > /dev/null
fi

# Function to check if a command rename rule exists and replace it, or add if not found
replace_or_add_rename() {
    COMMAND=$1
    OBFUSCATED_COMMAND=$2
    if grep -q "^rename-command $COMMAND " "$REDIS_CONF"; then
        sudo sed -i "s/^rename-command $COMMAND .*/rename-command $COMMAND $OBFUSCATED_COMMAND/" "$REDIS_CONF"
        echo "Replaced renaming for $COMMAND with $OBFUSCATED_COMMAND"
    else
        echo "rename-command $COMMAND $OBFUSCATED_COMMAND" | sudo tee -a "$REDIS_CONF" > /dev/null
        echo "Added renaming for $COMMAND with $OBFUSCATED_COMMAND"
    fi
}

# Obfuscate common Redis commands by renaming them
echo "Renaming basic Redis commands to obfuscated names..."
replace_or_add_rename GET hiddenGET
replace_or_add_rename SET hiddenSET
replace_or_add_rename KEYS hiddenKEYS
replace_or_add_rename DEL hiddenDEL
replace_or_add_rename PING hiddenPING
replace_or_add_rename FLUSHALL hiddenFLUSHALL
replace_or_add_rename SHUTDOWN hiddenSHUTDOWN
replace_or_add_rename CONFIG hiddenCONFIG

# Configure UFW to allow traffic only on the new Redis port
echo "Configuring UFW to allow traffic on new Redis port $NEW_PORT and remove the old port $OLD_PORT"
sudo ufw delete allow $OLD_PORT/tcp || echo "Could not delete non-existent rule"
sudo ufw allow $NEW_PORT/tcp
sudo ufw reload

# Restart the Redis service to apply the new port and obfuscation
echo "Restarting Redis service with new port $NEW_PORT"
sudo systemctl restart redis-server

# Enable Redis service to start on boot
sudo systemctl enable redis-server

# Populate Redis with the new sensitive data using obfuscated commands
echo "Populating Redis with new flag data: OnlyGeeksCertified"
redis-cli -p $NEW_PORT <<EOF
hiddenSET secret_key "OnlyGeeksCertified"
hiddenSET user:1 "admin"
hiddenSET password:1 "SuperSecretPassword"
EOF
echo "Sensitive data inserted into Redis on port $NEW_PORT"

# Check Redis is running on the new random port
echo "Verifying Redis is running on port $NEW_PORT..."
sudo netstat -tunlp | grep redis

# Check if cron job for rotating Redis port every 30 minutes exists
if ! crontab -l | grep -q "$SCRIPT_PATH"; then
    echo "Setting up cron job to rotate Redis port every 30 minutes."
    (crontab -l 2>/dev/null; echo "*/30 * * * * $SCRIPT_PATH") | crontab -
    echo "Cron job added: Redis port will rotate every 30 minutes."
else
    echo "Cron job for Redis port rotation already exists."
fi

echo "Script execution complete."

# End of script
