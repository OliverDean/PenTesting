let jwtToken = null;
let refreshToken = null;
const tokenExpiryTime = 60 * 60 * 1000; // 1 hour

// Function to switch between sections
function showSection(sectionId) {
    document.querySelectorAll('.section').forEach(section => {
        section.classList.remove('active');
    });
    document.getElementById(sectionId).classList.add('active');
    updateNavbar(); //extra check
}

// Sanitize any dynamic input to prevent XSS
function sanitizeInput(input) {
    const element = document.createElement('div');
    element.innerText = input;
    return element.innerHTML;
}

// Sanitize JSON output for display
function sanitizeJSON(data) {
    return JSON.stringify(data, null, 2)
        .replace(/</g, '&lt;')
        .replace(/>/g, '&gt;');
}

// Check if the JWT token is expired
function isTokenExpired() {
    if (!jwtToken) return true;
    const tokenPayload = JSON.parse(atob(jwtToken.split('.')[1]));
    const now = Date.now() / 1000;
    return tokenPayload.exp < now;
}

// Automatically refresh the token if it's expired
async function refreshJwtToken() {
    if (!refreshToken) {
        alert('Your session has expired. Please log in again.');
        return;
    }

    try {
        const response = await fetch('http://localhost:8080/refresh', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ refresh_token: refreshToken }),
        });

        const result = await response.json();
        if (result.token) {
            jwtToken = result.token;
        } else {
            alert('Failed to refresh session, please log in again.');
        }
    } catch (error) {
        console.error('Error refreshing token:', error);
    }
}

// Add secure headers and handle expired token before making requests
async function secureFetch(url, options = {}) {
    if (isTokenExpired()) {
        await refreshJwtToken();
    }

    options.headers = {
        ...options.headers,
        "Authorization": `Bearer ${jwtToken}`,
    };
    console.log(options.headers)

    const response = await fetch(url, options);
    if (response.status === 401) {
        alert('Unauthorized access. Please login again.');
        return null;
    }

    if (response.status >= 400) {
        throw new Error(`Request failed with status code ${response.status}`);
    }

    return response;
}

// Register user
document.getElementById('registerForm').addEventListener('submit', async function(event) {
    event.preventDefault();

    const username = sanitizeInput(document.getElementById('regUsername').value);
    const email = sanitizeInput(document.getElementById('regEmail').value);
    const password = sanitizeInput(document.getElementById('regPassword').value);

    if (!username || !email || !password) {
        alert('All fields are required.');
        return;
    }

    try {
        const response = await secureFetch('http://localhost:8080/register', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ username, email, password }),
        });

        const result = await response.json();
        document.getElementById('registerResult').textContent = sanitizeJSON(result);
    } catch (error) {
        console.error('Error registering user:', error);
    }
});
let hidden_flag = "FLAG{NarrowLootChapter}";

// Login user
document.getElementById('loginForm').addEventListener('submit', async function(event) {
    event.preventDefault();

    const username = sanitizeInput(document.getElementById('loginUsername').value);
    const password = sanitizeInput(document.getElementById('loginPassword').value);

    if (!username || !password) {
        alert('Username and password are required.');
        return;
    }

    try {
        const response = await fetch('http://localhost:8080/login', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ username, password }),
        });

        const result = await response.json();
        if (result.token) {
            jwtToken = result.token;
            refreshToken = result.refresh_token; // If using refresh tokens
            setTimeout(refreshJwtToken, tokenExpiryTime); // Refresh token in an hour
            updateNavbar();
        }
        document.getElementById('loginResult').textContent = sanitizeJSON(result);
    } catch (error) {
        console.error('Error logging in:', error);
    }
});

// Send reset email
document.getElementById('resetForm').addEventListener('submit', async function(event) {
    event.preventDefault();

    const email = sanitizeInput(document.getElementById('resetEmail').value);

    if (!jwtToken) {
        document.getElementById('resetResult').textContent = 'Please login first';
        return;
    }

    try {
        const response = await secureFetch('http://localhost:8080/reset-request', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ email }),
        });

        const result = await response.json();
        document.getElementById('resetResult').textContent = sanitizeJSON(result);
    } catch (error) {
        console.error('Error sending email:', error);
    }
});

// Verify a password reset
document.getElementById('resetForm2').addEventListener('submit', async function(event) {
    event.preventDefault();

    const token = sanitizeInput(document.getElementById('resetToken').value);
    const id = sanitizeInput(document.getElementById('resetID').value);
    const password = sanitizeInput(document.getElementById('resetPassword').value);


    if (!jwtToken) {
        document.getElementById('resetResult').textContent = 'Please login first';
        return;
    }

    try {
        const response = await fetch('http://localhost:8080/reset', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ token, id, password }),
        });

        const result = await response.json();
        document.getElementById('resetResult').textContent = sanitizeJSON(result);
    } catch (error) {
        console.error('Error resetting password:', error);
    }
});

// Logout user
function logout() {
    jwtToken = null;
    refreshToken = null;
    updateNavbar()
    alert('Logged out successfully');
}

// Print flags
const print_flag = () => {    
    let hidden_flag = "FLAG{NarrowLootChapter}";
    
    return {
        user: function() {
            if (jwtToken == null) {
                alert("You need to login as a user first!")
            } else {
                alert("You found the user flag!\n FLAG{CurtainCenturyYouth}")
            }
        },

        admin: function() {
            if (jwtToken == null) {
                alert("You need to login as an admin first!")
            } else {
                parsed_jwt_roles = parseJwt(jwtToken).split(",")[1]
                if (parsed_jwt_roles.includes("admin")) {
                    alert("You found the admin flag!\n FLAG{ElectionSqueezeLanguage}\n There is one more \"hidden\" flag")
                } else {
                    alert("You need to login as an admin first!")
                }
            }
        },

        hidden: function() { //can only be accessed with scripting, never called
            alert("Close, but the flag is under the \"hidden_flag\" variable in this object")
        }
    }
}

//called every login
function updateNavbar() {
    if (jwtToken != null) {
        userButtons = document.querySelectorAll('.userButton') 
        userButtons.forEach(element=>{element.style.display = 'block';});

        parsed_jwt_roles = parseJwt(jwtToken).split(",")[1]
        if (parsed_jwt_roles.includes("admin")) {
            adminButtons = document.querySelectorAll('.adminButton') 
            adminButtons.forEach(element=>{element.style.display = 'block';});
        }
    }
}

//taken from stackoverflow
function parseJwt (token) {
    var base64Url = token.split('.')[1];
    var base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
    var jsonPayload = decodeURIComponent(window.atob(base64).split('').map(function(c) {
        return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
    }).join(''));

    return jsonPayload;
}


async function open_shell() {
    if (!jwtToken) {
        document.getElementById('resetResult').textContent = 'Please login first';
        return;
    }

    try {
        const response = await secureFetch('http://localhost:8080/shell', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
        });

    } catch (error) {
        console.error('Error opening shell:', error);
    }
}

// check if user is logged in/admin on page load
updateNavbar();
const PrintFlag = print_flag();