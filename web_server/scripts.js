let jwtToken = null;
let refreshToken = null;
const tokenExpiryTime = 60 * 60 * 1000; // 1 hour

// Function to switch between sections
function showSection(sectionId) {
    document.querySelectorAll('.section').forEach(section => {
        section.classList.remove('active');
    });
    document.getElementById(sectionId).classList.add('active');
}

// Sanitize any dynamic input to prevent XSS
function sanitizeInput(input) {
    const element = document.createElement('div');
    element.innerText = input;
    return element.innerHTML;
}

// Sanitize JSON output for display
function sanitizeJSON(data) {
    return JSON.stringify(data, null, 2)
        .replace(/</g, '&lt;')
        .replace(/>/g, '&gt;');
}

// Check if the JWT token is expired
function isTokenExpired() {
    if (!jwtToken) return true;
    const tokenPayload = JSON.parse(atob(jwtToken.split('.')[1]));
    const now = Date.now() / 1000;
    return tokenPayload.exp < now;
}

// Automatically refresh the token if it's expired
async function refreshJwtToken() {
    if (!refreshToken) {
        alert('Your session has expired. Please log in again.');
        return;
    }

    try {
        const response = await fetch('http://localhost:8080/refresh', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ refresh_token: refreshToken }),
        });

        const result = await response.json();
        if (result.token) {
            jwtToken = result.token;
        } else {
            alert('Failed to refresh session, please log in again.');
        }
    } catch (error) {
        console.error('Error refreshing token:', error);
    }
}

// Add secure headers and handle expired token before making requests
async function secureFetch(url, options = {}) {
    if (isTokenExpired()) {
        await refreshJwtToken();
    }

    options.headers = {
        ...options.headers,
        'Authorization': `Bearer ${jwtToken}`,
    };

    const response = await fetch(url, options);
    if (response.status === 401) {
        alert('Unauthorized access. Please login again.');
        return null;
    }

    if (response.status >= 400) {
        throw new Error(`Request failed with status code ${response.status}`);
    }

    return response;
}

// Register user
document.getElementById('registerForm').addEventListener('submit', async function(event) {
    event.preventDefault();

    const username = sanitizeInput(document.getElementById('regUsername').value);
    const email = sanitizeInput(document.getElementById('regEmail').value);
    const password = sanitizeInput(document.getElementById('regPassword').value);

    if (!username || !email || !password) {
        alert('All fields are required.');
        return;
    }

    try {
        const response = await fetch('http://localhost:8080/register', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ username, password, email }),
        });

        const result = await response.json();
        document.getElementById('registerResult').textContent = sanitizeJSON(result);
    } catch (error) {
        //put more verbose errors here
        console.error('Error registering user:', error);
    }
});

// Login user
document.getElementById('loginForm').addEventListener('submit', async function(event) {
    event.preventDefault();

    const username = sanitizeInput(document.getElementById('loginUsername').value);
    const password = sanitizeInput(document.getElementById('loginPassword').value);

    if (!username || !password) {
        alert('Username and password are required.');
        return;
    }

    try {
        const response = await fetch('http://localhost:8080/login', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ username, password }),
        });

        const result = await response.json();
        if (result.token) {
            jwtToken = result.token;
            refreshToken = result.refresh_token; // If using refresh tokens
            setTimeout(refreshJwtToken, tokenExpiryTime); // Refresh token in an hour
        }
        document.getElementById('loginResult').textContent = sanitizeJSON(result);
    } catch (error) {
        console.error('Error logging in:', error);
    }
});

// Update profile
document.getElementById('profileForm').addEventListener('submit', async function(event) {
    event.preventDefault();

    const email = sanitizeInput(document.getElementById('updateEmail').value);
    const password = sanitizeInput(document.getElementById('updatePassword').value);

    if (!jwtToken) {
        document.getElementById('profileResult').textContent = 'Please login first';
        return;
    }

    if (!email || !password) {
        alert('Email and password are required.');
        return;
    }

    try {
        const response = await secureFetch('http://localhost:8080/profile/update', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ email, password }),
        });

        const result = await response.json();
        document.getElementById('profileResult').textContent = sanitizeJSON(result);
    } catch (error) {
        console.error('Error updating profile:', error);
    }
});

// Logout user
function logout() {
    jwtToken = null;
    refreshToken = null;
    alert('Logged out successfully');
}

function print_flag(value) {
    if (value == "user") {
        //TODO check if logged in
        alert("You found the user flag!\n flag123")
    }
    else if (value == "admin") {
        //TODO check if logged in AND admin
        alert("You found the admin flag!\n flag456\n There is one more flag that is \"hidden\"")
    }
    else if (value == "hidden") { //can only be accessed with xss, never called
        alert("You found the hidden flag!\n flag789")
    }
}

// Load available routes on page load
fetchRoutes();
