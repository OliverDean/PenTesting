let jwtToken = null;
let refreshToken = null;
const tokenExpiryTime = 60 * 60 * 1000; // 1 hour

// Function to switch between sections
function showSection(sectionId) {
    document.querySelectorAll('.section').forEach(section => {
        section.classList.remove('active');
    });
    document.getElementById(sectionId).classList.add('active');
    updateNavbar(); // Extra check to update navbar visibility
}

// Sanitize any dynamic input to prevent XSS
function sanitizeInput(input) {
    const element = document.createElement('div');
    element.innerText = input;
    return element.innerHTML;
}

// Sanitize JSON output for display
function sanitizeJSON(data) {
    return JSON.stringify(data, null, 2)
        .replace(/</g, '&lt;')
        .replace(/>/g, '&gt;');
}

// Check if the JWT token is expired
function isTokenExpired() {
    if (!jwtToken) return true;
    const tokenPayload = JSON.parse(atob(jwtToken.split('.')[1]));
    const now = Date.now() / 1000;
    return tokenPayload.exp < now;
}

// Automatically refresh the token if it's expired
async function refreshJwtToken() {
    if (!refreshToken) {
        alert('Your session has expired. Please log in again.');
        return;
    }

    try {
        const response = await fetch('http://localhost:8080/refresh', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ refresh_token: refreshToken }),
        });

        const result = await response.json();
        if (result.token) {
            jwtToken = result.token;
            setTimeout(refreshJwtToken, tokenExpiryTime); // Schedule next refresh
            updateNavbar();
        } else {
            alert('Failed to refresh session, please log in again.');
            logout(); // Force logout on failure
        }
    } catch (error) {
        console.error('Error refreshing token:', error);
        alert('Error refreshing session, please log in again.');
        logout(); // Force logout on error
    }
}

// Register user
document.getElementById('registerForm').addEventListener('submit', async function(event) {
    event.preventDefault();

    const username = sanitizeInput(document.getElementById('regUsername').value);
    const email = sanitizeInput(document.getElementById('regEmail').value);
    const password = sanitizeInput(document.getElementById('regPassword').value);

    if (!username || !email || !password) {
        alert('All fields are required.');
        return;
    }

    try {
        const response = await fetch('http://localhost:8080/register', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ username, email, password }),
        });

        const result = await response.json();
        document.getElementById('registerResult').textContent = sanitizeJSON(result);
    } catch (error) {
        console.error('Error registering user:', error);
    }
});

// Login user
document.getElementById('loginForm').addEventListener('submit', async function(event) {
    event.preventDefault();

    const username = sanitizeInput(document.getElementById('loginUsername').value);
    const password = sanitizeInput(document.getElementById('loginPassword').value);

    if (!username || !password) {
        alert('Username and password are required.');
        return;
    }

    try {
        const response = await fetch('http://localhost:8080/login', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ username, password }),
        });

        const result = await response.json();
        if (result.token) {
            jwtToken = result.token;
            refreshToken = result.refresh_token || null; // If using refresh tokens
            setTimeout(refreshJwtToken, tokenExpiryTime); // Schedule token refresh
            updateNavbar();
        }
        document.getElementById('loginResult').textContent = sanitizeJSON(result);
    } catch (error) {
        console.error('Error logging in:', error);
    }
});

// Send reset email
document.getElementById('resetForm').addEventListener('submit', async function(event) {
    event.preventDefault();

    const email = sanitizeInput(document.getElementById('resetEmail').value);

    if (!jwtToken) {
        document.getElementById('resetResult').textContent = 'Please login first';
        return;
    }

    try {
        const response = await fetch('http://localhost:8080/reset-request', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ jwtToken, email }),
        });

        const result = await response.json();
        document.getElementById('resetResult').textContent = sanitizeJSON(result);
    } catch (error) {
        console.error('Error sending email:', error);
    }
});

// Verify a password reset
document.getElementById('resetForm2').addEventListener('submit', async function(event) {
    event.preventDefault();

    const token = sanitizeInput(document.getElementById('resetToken').value);
    const id = sanitizeInput(document.getElementById('resetID').value);
    const password = sanitizeInput(document.getElementById('resetPassword').value);

    if (!jwtToken) {
        document.getElementById('resetResult').textContent = 'Please login first';
        return;
    }

    try {
        const response = await fetch('http://localhost:8080/reset', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ jwtToken, token, id, password }),
        });

        const result = await response.json();
        document.getElementById('resetResult').textContent = sanitizeJSON(result);
    } catch (error) {
        console.error('Error resetting password:', error);
    }
});

// Logout user
function logout() {
    jwtToken = null;
    refreshToken = null;
    updateNavbar();
    alert('Logged out successfully');
}

// Print flags
const PrintFlag = (() => {    
    let hidden_flag = "FLAG{NarrowLootChapter}";
    
    return {
        user: async function() {
            if (!jwtToken) {
                alert("You need to login as a user first!");
                return;
            }
            try {
                const response = await fetch('http://localhost:8080/userflag', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ jwtToken }),
                });
        
                const result = await response.json();
                alert(result.message);
            } catch (error) {
                console.error('Error getting user flag:', error);
            }
        },

        admin: async function() {
            if (!jwtToken) {
                alert("You need to login as an admin first!");
                return;
            }
            const parsed_jwt = parseJwt(jwtToken);
            const roles = parsed_jwt.roles || [];
            if (roles.includes("admin")) {
                try {
                    const response = await fetch('http://localhost:8080/adminflag', { // Corrected endpoint
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ jwtToken }),
                    });
            
                    const result = await response.json();
                    alert(result.message);
                } catch (error) {
                    console.error('Error getting admin flag:', error);
                }

            } else {
                alert("You need to login as an admin first!");
            }
        },

        hidden: function() { // Can only be accessed with scripting, never called
            alert("Close, but the flag is under the \"hidden_flag\" variable in this object");
        }
    };
})();

// Update Navbar based on authentication and roles
function updateNavbar() {
    if (jwtToken) {
        const userButtons = document.querySelectorAll('.userButton');
        userButtons.forEach(element => { element.style.display = 'block'; });

        const parsed_jwt = parseJwt(jwtToken);
        const roles = parsed_jwt.roles || [];

        if (roles.includes("admin")) {
            const adminButtons = document.querySelectorAll('.adminButton');
            adminButtons.forEach(element => { element.style.display = 'block'; });
        }

        // *** Added Code Start ***
        // Hide "Open Shell" button if user is not an admin
        const openShellBtn = Array.from(document.querySelectorAll('.userButton')).find(btn => btn.textContent.trim() === 'Open Shell');
        if (openShellBtn) {
            if (roles.includes("admin")) {
                openShellBtn.style.display = 'block';
            } else {
                openShellBtn.style.display = 'none';
            }
        }
        // *** Added Code End ***
    } else {
        // Hide user and admin buttons if not logged in
        const userButtons = document.querySelectorAll('.userButton');
        userButtons.forEach(element => { element.style.display = 'none'; });

        const adminButtons = document.querySelectorAll('.adminButton');
        adminButtons.forEach(element => { element.style.display = 'none'; });
    }
}

// Parse JWT token and return the payload
function parseJwt(token) {
    try {
        const base64Url = token.split('.')[1];
        const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
        const jsonPayload = decodeURIComponent(atob(base64).split('').map(function(c) {
            return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
        }).join(''));
    
        return JSON.parse(jsonPayload);
    } catch (e) {
        console.error('Error parsing JWT:', e);
        return {};
    }
}

// Open shell function restricted to admin users
async function open_shell() {
    if (!jwtToken) {
        alert('Please log in first.');
        return;
    }

    const parsed_jwt = parseJwt(jwtToken);
    const roles = parsed_jwt.roles || [];

    if (!roles.includes("admin")) {
        alert('Access denied. Admin privileges required.');
        return;
    }

    // Redirect to the shell page
    window.location.href = '/shell';
}

// Initialize the navbar on page load
updateNavbar();