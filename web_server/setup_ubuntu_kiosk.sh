#!/bin/bash

# Exit immediately if a command exits with a non-zero status
set -e

# Get the username of the user who invoked sudo
if [ "$SUDO_USER" ]; then
    ORIGINAL_USER="$SUDO_USER"
else
    ORIGINAL_USER="$USER"
fi

# Variables (Adjust these variables according to your environment)
WEB_SERVER_DIR="/home/$ORIGINAL_USER/web_server"
SHARED_FOLDER="/media/sf_web_server"
BACKUP_DIR="/backup"

# Function to print messages
function print_msg() {
    echo -e "\n==== $1 ====\n"
}

# Update package lists and upgrade existing packages
print_msg "Updating and upgrading the system..."
apt-get update && apt-get -y upgrade

# Install necessary packages
print_msg "Installing necessary packages..."
apt-get install -y --no-install-recommends \
    sudo \
    openssl \
    python3 \
    python3-pip \
    python3-venv \
    clamav \
    fail2ban \
    wget \
    tar \
    bash \
    xinit \
    x11-xserver-utils \
    firefox \
    lightdm \
    xdotool \
    unclutter \
    nano \
    gnupg \
    zip \
    unzip \
    ufw \
    nginx \
    apparmor \
    apparmor-utils \
    unattended-upgrades \
    apt-listchanges \
    logwatch

# Configure UFW Firewall
print_msg "Configuring UFW firewall..."
ufw default deny incoming
ufw default allow outgoing
ufw allow 'Nginx HTTP'
ufw --force enable

# Copy the web server files from the shared folder to the VM's filesystem
if [ ! -d "$WEB_SERVER_DIR" ]; then
    print_msg "Copying web server files to VM's filesystem..."
    mkdir -p "$WEB_SERVER_DIR"
    cp -r "$SHARED_FOLDER/"* "$WEB_SERVER_DIR"
    chown -R "$ORIGINAL_USER":"$ORIGINAL_USER" "$WEB_SERVER_DIR"
    chmod -R 750 "$WEB_SERVER_DIR"
else
    print_msg "Web server directory already exists. Skipping copy."
fi

# Set up Python virtual environment
if [ ! -d "$WEB_SERVER_DIR/venv" ]; then
    print_msg "Setting up Python virtual environment..."
    python3 -m venv "$WEB_SERVER_DIR/venv"
    source "$WEB_SERVER_DIR/venv/bin/activate"
    print_msg "Installing Python packages from requirements.txt..."
    pip install --upgrade pip
    pip install -r "$WEB_SERVER_DIR/requirements.txt"
    deactivate
else
    print_msg "Virtual environment already exists. Skipping setup."
fi

# Create a config.py file for global variables if it doesn't exist
if [ ! -f "$WEB_SERVER_DIR/config.py" ]; then
    print_msg "Creating config.py..."
    cat > "$WEB_SERVER_DIR/config.py" <<EOL
import os
from datetime import timedelta

# Environment-based secret key for security (avoid hardcoding secrets)
SECRET_KEY = os.getenv('JWT_SECRET_KEY', 'supersecret')
PASSWORD_MIN_LENGTH = 8

# Logging configuration
LOG_LEVEL = 'INFO'
LOG_FORMAT = '%(asctime)s - %(levelname)s - %(message)s'

# Rate limiter settings
RATE_LIMIT_WINDOW = 1  # in seconds
RATE_LIMIT_MAX_ATTEMPTS = 5

# CORS setup options
CORS_OPTIONS = {
    "*": {
        "allow_credentials": True,
        "expose_headers": "*",
        "allow_headers": "*",
    }
}

# Allowed file extensions and max file size for uploads
ALLOWED_EXTENSIONS = {'.jpg', '.jpeg', '.png', '.pdf', '.txt', '.docx', '.xlsx'}
MAX_FILE_SIZE = 5 * 1024 * 1024  # 5 MB

# Pagination limit
MAX_LIMIT = 100

# JWT settings
JWT_ALGORITHM = 'HS256'
JWT_EXP_DELTA = timedelta(hours=1)
EOL
else
    print_msg "config.py already exists. Skipping creation."
fi

# Modify server.py to import config.py if not already modified
if ! grep -q "from config import *" "$WEB_SERVER_DIR/server.py"; then
    print_msg "Modifying server.py to import config.py..."
    sed -i '1s|^|from config import *\n|' "$WEB_SERVER_DIR/server.py"
else
    print_msg "server.py already imports config.py. Skipping modification."
fi

# Create users and set passwords
print_msg "Creating users and setting passwords..."
# Users: user1, user2, user3
for i in {1..3}; do
    if id "user${i}" &>/dev/null; then
        echo "User user${i} already exists. Skipping creation."
    else
        adduser --disabled-password --gecos "" user${i}
        echo "user${i}:User${i}Pass!" | chpasswd
    fi
done

# Create an admin user with sudo privileges
if id "adminuser" &>/dev/null; then
    echo "Admin user already exists. Skipping creation."
else
    print_msg "Creating admin user..."
    adduser --disabled-password --gecos "" adminuser
    echo "adminuser:AdminPass!" | chpasswd
    usermod -aG sudo adminuser
fi

# Lock root account if it's not already locked
print_msg "Ensuring root account is locked..."
passwd -l root || true

# Create directory structure and files for each user
print_msg "Creating directory structures and files for users..."
for i in {1..3}; do
    USER_HOME="/home/user${i}"
    if [ ! -d "${USER_HOME}/Documents" ]; then
        mkdir -p "${USER_HOME}/Documents" "${USER_HOME}/Downloads" "${USER_HOME}/Music" "${USER_HOME}/Pictures" "${USER_HOME}/Programs"

        # Create some example files
        echo "Creating example files for user${i}..."
        echo "This is a personal document for user${i}." > "${USER_HOME}/Documents/personal.docx"
        echo "This is a downloaded file for user${i}." > "${USER_HOME}/Downloads/file${i}.zip"
        echo "Sample music file for user${i}." > "${USER_HOME}/Music/song${i}.mp3"
        echo "Sample picture for user${i}." > "${USER_HOME}/Pictures/picture${i}.jpg"
        echo "Program files for user${i}." > "${USER_HOME}/Programs/program${i}.exe"

        # Create an encrypted file using GPG
        echo "Creating encrypted file for user${i}..."
        echo "Sensitive information for user${i}." > "${USER_HOME}/Documents/secret.txt"
        echo "SecretPass${i}" | gpg --batch --yes --passphrase-fd 0 -c "${USER_HOME}/Documents/secret.txt"
        rm "${USER_HOME}/Documents/secret.txt"

        # Set permissions
        chown -R user${i}:user${i} "${USER_HOME}"
        chmod -R 700 "${USER_HOME}"
    else
        echo "Home directories for user${i} already exist. Skipping creation."
    fi
done

# Ensure users have no access to the web server files
print_msg "Restricting user access to web server files..."
chmod -R 750 "$WEB_SERVER_DIR"
chown -R "$ORIGINAL_USER":adminuser "$WEB_SERVER_DIR"

# Setup kiosk user
if id "kiosk" &>/dev/null; then
    echo "Kiosk user already exists. Skipping creation."
else
    print_msg "Setting up kiosk user..."
    adduser --disabled-password --gecos "" kiosk
    # Lock the kiosk user password
    passwd -l kiosk
fi

# Configure automatic login for kiosk user
if [ ! -f "/etc/lightdm/lightdm.conf" ]; then
    print_msg "Configuring automatic login..."
    cat > /etc/lightdm/lightdm.conf <<EOF
[Seat:*]
autologin-user=kiosk
autologin-user-timeout=0
user-session=ubuntu
EOF
else
    print_msg "LightDM configuration already exists. Skipping."
fi

# Create an Xsession script for kiosk mode
if [ ! -f "/home/kiosk/.xsession" ]; then
    print_msg "Creating Xsession script for kiosk mode..."
    cat > /home/kiosk/.xsession <<'EOF'
#!/bin/bash
xset -dpms      # Disable DPMS (Energy Star) features.
xset s off      # Disable screen saver
xset s noblank  # Don't blank the video device

# Disable certain key combinations
xmodmap -e "clear Mod1"
xmodmap -e "clear Mod4"
xmodmap -e "keycode 64 = NoSymbol"    # Disable Alt_L
xmodmap -e "keycode 133 = NoSymbol"   # Disable Super_L (Windows key)
xmodmap -e "keycode 134 = NoSymbol"   # Disable Super_R
xmodmap -e "keycode 135 = NoSymbol"   # Disable Menu
xmodmap -e "keycode 67 = NoSymbol"    # Disable F1
xmodmap -e "keycode 68 = NoSymbol"    # Disable F2
xmodmap -e "keycode 69 = NoSymbol"    # Disable F3
xmodmap -e "keycode 70 = NoSymbol"    # Disable F4
xmodmap -e "keycode 71 = NoSymbol"    # Disable F5
xmodmap -e "keycode 72 = NoSymbol"    # Disable F6
xmodmap -e "keycode 73 = NoSymbol"    # Disable F7
xmodmap -e "keycode 74 = NoSymbol"    # Disable F8
xmodmap -e "keycode 75 = NoSymbol"    # Disable F9
xmodmap -e "keycode 76 = NoSymbol"    # Disable F10
xmodmap -e "keycode 95 = NoSymbol"    # Disable F11
xmodmap -e "keycode 96 = NoSymbol"    # Disable F12

# Hide the mouse cursor after inactivity
unclutter -idle 0.5 -root &

# Start Firefox in kiosk mode pointing to localhost
firefox --kiosk http://localhost
EOF

    # Make the Xsession script executable
    chmod +x /home/kiosk/.xsession

    # Lock down the kiosk user account
    print_msg "Locking down kiosk user account..."
    usermod -s /usr/sbin/nologin kiosk
    chmod 700 /home/kiosk
else
    print_msg ".xsession script for kiosk user already exists. Skipping."
fi

# Set up the web server to start automatically on boot
if [ ! -f "/usr/local/bin/start_webserver.sh" ]; then
    print_msg "Setting up web server to start on boot..."
    # Create the startup script
    cat > /usr/local/bin/start_webserver.sh <<EOF
#!/bin/bash
# Activate the virtual environment
source "$WEB_SERVER_DIR/venv/bin/activate"
# Navigate to the web server directory
cd "$WEB_SERVER_DIR"
# Run the web server
exec python3 server.py
EOF

    # Make the startup script executable
    chmod +x /usr/local/bin/start_webserver.sh
else
    print_msg "Startup script already exists. Skipping."
fi

# Create the systemd service file
if [ ! -f "/etc/systemd/system/webserver.service" ]; then
    print_msg "Creating systemd service file..."
    cat > /etc/systemd/system/webserver.service <<EOF
[Unit]
Description=Python Web Server
After=network.target

[Service]
Type=simple
User=$ORIGINAL_USER
WorkingDirectory=$WEB_SERVER_DIR
ExecStart=/usr/local/bin/start_webserver.sh
Restart=on-failure
Environment=JWT_SECRET_KEY=supersecret

[Install]
WantedBy=multi-user.target
EOF

    # Reload systemd and enable the service
    print_msg "Enabling web server service..."
    systemctl daemon-reload
    systemctl enable webserver.service
    systemctl start webserver.service
else
    print_msg "Systemd service file already exists. Reloading and restarting service."
    systemctl daemon-reload
    systemctl restart webserver.service
fi

# Configure Nginx as a reverse proxy without HTTPS
if [ ! -f "/etc/nginx/sites-available/webserver" ]; then
    print_msg "Configuring Nginx as a reverse proxy..."
    rm -f /etc/nginx/sites-enabled/default
    cat > /etc/nginx/sites-available/webserver <<EOF
server {
    listen 80;
    server_name localhost;
    location / {
        proxy_pass http://localhost:8080;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
    }
}
EOF
    ln -s /etc/nginx/sites-available/webserver /etc/nginx/sites-enabled/webserver
    nginx -t
    systemctl restart nginx
else
    print_msg "Nginx configuration already exists. Skipping."
fi

# Secure Nginx configuration
print_msg "Securing Nginx configuration..."
cat > /etc/nginx/nginx.conf <<'EOF'
user www-data;
worker_processes auto;
pid /run/nginx.pid;
events {
    worker_connections 1024;
}
http {
    server_tokens off;
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    add_header X-Frame-Options DENY;
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";
    include /etc/nginx/conf.d/*.conf;
    include /etc/nginx/sites-enabled/*;
}
EOF
nginx -t
systemctl restart nginx

# Configure Fail2Ban
print_msg "Setting up Fail2Ban..."
systemctl enable fail2ban
systemctl start fail2ban

# Configure automatic security updates
print_msg "Setting up automatic security updates..."
dpkg-reconfigure -plow unattended-upgrades

# Enable AppArmor
print_msg "Enabling AppArmor..."
systemctl enable apparmor
systemctl start apparmor

# Log monitoring with logwatch
print_msg "Configuring logwatch for log monitoring..."
if ! grep -q "logwatch" /etc/crontab; then
    echo '0 7 * * * /usr/sbin/logwatch --output mail --mailto root --detail high' >> /etc/crontab
else
    print_msg "Logwatch cron job already exists. Skipping."
fi

# Set up backup and recovery plan with rsync
print_msg "Setting up backup directory..."
if [ ! -d "$BACKUP_DIR" ]; then
    mkdir -p "$BACKUP_DIR"
    chown "$ORIGINAL_USER":"$ORIGINAL_USER" "$BACKUP_DIR"
fi

print_msg "Configuring daily backups..."
if ! grep -q "$WEB_SERVER_DIR" /etc/crontab; then
    echo "0 2 * * * $ORIGINAL_USER rsync -a --exclude='$WEB_SERVER_DIR/venv' $WEB_SERVER_DIR $BACKUP_DIR" >> /etc/crontab
else
    print_msg "Backup cron job already exists. Skipping."
fi

print_msg "Setup complete. Please reboot the system to apply all changes."
