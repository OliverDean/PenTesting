import yaml
import subprocess
import os

def detect_open_ports(ip):
    """Detect open ports on the target IP using nmap."""
    open_ports = []
    try:
        # Use nmap to scan all open ports
        result = subprocess.run(["nmap", "-p-", ip], capture_output=True, text=True)
        for line in result.stdout.splitlines():
            if "open" in line:
                port = line.split("/")[0]
                open_ports.append(int(port))
        print(f"Detected open ports: {open_ports}")
        return open_ports
    except Exception as e:
        print(f"Error during port scanning: {str(e)}")
        return []

def update_config_with_ports(config_file, ports):
    """Update the config.yaml file with the detected open ports."""
    try:
        with open(config_file, 'r') as file:
            config = yaml.safe_load(file)

        # Update the configuration with the open ports
        config['detected_ports'] = ports

        # Write the updated config back to the file
        with open(config_file, 'w') as file:
            yaml.safe_dump(config, file)

        print(f"Updated config.yaml with detected ports: {ports}")
    except Exception as e:
        print(f"Error updating config.yaml: {str(e)}")

def run_port_scan_and_update_config(ip, config_file):
    """Run port scan and update the config.yaml file."""
    # Detect open ports
    open_ports = detect_open_ports(ip)

    # Update config.yaml with the detected open ports
    update_config_with_ports(config_file, open_ports)

    return open_ports

# Example usage
if __name__ == "__main__":
    target_ip = "192.168.1.100"  # IP address to scan
    config_file = "config.yaml"  # Path to config.yaml

    # Run port scan and update the config
    run_port_scan_and_update_config(target_ip, config_file)
